diff --git a/bundle_copy.api.php b/bundle_copy.api.php
index 807e83c..58f2f45 100644
--- a/bundle_copy.api.php
+++ b/bundle_copy.api.php
@@ -21,6 +21,9 @@ function hook_bundle_copy_info() {
     'node' => array(
       'bundle_export_callback' => 'node_type_get_type',
       'bundle_save_callback' => 'node_type_save',
+      'bundle_clone_load_callback' => 'node_type_get_type',
+      'bundle_clone_save_callback' => 'node_type_save',
+      'bundle_clone_bundlename_validate' => 'node_type_load',
       'export_menu' => array(
         'path' => 'admin/structure/types/export',
         'access arguments' => 'administer content types',
@@ -29,10 +32,14 @@ function hook_bundle_copy_info() {
         'path' => 'admin/structure/types/import',
         'access arguments' => 'administer content types',
       ),
+      'clone_menu' => array(
+        'path' => 'admin/structure/types/clone',
+        'access arguments' => 'administer content types',
+      ),
     ),
   );
 }
 
 /**
  * @} End of "addtogroup hooks".
- */
\ No newline at end of file
+ */
diff --git a/bundle_copy.module b/bundle_copy.module
index d5c946f..84261d4 100644
--- a/bundle_copy.module
+++ b/bundle_copy.module
@@ -27,6 +27,9 @@ function bundle_copy_bundle_copy_info() {
   $info['node'] = array(
     'bundle_export_callback' => 'node_type_get_type',
     'bundle_save_callback' => 'node_type_save',
+    'bundle_clone_load_callback' => 'node_type_get_type',
+    'bundle_clone_save_callback' => 'node_type_save',
+    'bundle_clone_bundlename_validate' => 'node_type_load',
     'export_menu' => array(
       'path' => 'admin/structure/types/export',
       'access arguments' => 'administer content types',
@@ -35,6 +38,10 @@ function bundle_copy_bundle_copy_info() {
       'path' => 'admin/structure/types/import',
       'access arguments' => 'administer content types',
     ),
+    'clone_menu' => array(
+        'path' => 'admin/structure/types/clone',
+        'access arguments' => 'administer content types',
+    ),
   );
 
   $info['user'] = array(
@@ -92,8 +99,17 @@ function bundle_copy_menu() {
       'access arguments' => array($info['import_menu']['access arguments']),
       'type' => MENU_LOCAL_TASK
     );
+    if (isset($info['clone_menu']['path'])) {
+      $bundle_name_validate = $bc_info[$entity_type]['bundle_clone_bundlename_validate'];
+      $items[$info['clone_menu']['path']] = array(
+        'title' => 'Clone',
+        'page callback' => 'drupal_get_form',
+        'page arguments' => array('bundle_copy_clone', $entity_type, $bundle_name_validate),
+        'access arguments' => array($info['import_menu']['access arguments']),
+        'type' => MENU_LOCAL_TASK
+      );
+    }
   }
-
   return $items;
 }
 
@@ -186,7 +202,7 @@ function bundle_copy_export($form, &$form_state, $entity_type = 'node') {
               }
               foreach ($all_groups[$entity_type][$key] as $view_mode => $groups) {
                 foreach ($groups as $field_group) {
-                  $group_options[$field_group->id]['fieldgroup'] = $field_group->label . ' (' . $field_group->bundle . ' - ' . $field_group->mode .')';
+                  $group_options[$field_group->id]['fieldgroup'] = $field_group->label . ' (' . $field_group->bundle . ' - ' . $field_group->mode . ')';
                   $fieldgroups[$field_group->id] = $field_group;
                 }
               }
@@ -558,3 +574,357 @@ function _bc_bundle_export_ignore($name) {
 function _bc_bundle_save_ignore($bundle) {
 
 }
+
+
+/**
+ * Menu callback: present the clone page.
+ */
+function bundle_copy_clone($form, &$form_state, $entity_type = 'node' , $bundle_name_validate = 'node_type_load') {
+  if (isset($form_state['step'])) {
+    $step = $form_state['step'];
+  }
+  else {
+    $step = 1;
+    $form_state['step'] = $step;
+  }
+
+  switch ($step) {
+
+    // Select the bundles.
+    case 1:
+      $bundles = _bundle_copy_bundle_info($entity_type, FALSE);
+      $form['bundle-info'] = array(
+        '#markup' => t('Select the bundle you want to Clone.'),
+      );
+      $form['bundle'] = array(
+        '#type' => 'select',
+       '#options' => $bundles,
+       '#default_value' => '',
+       '#description' => t('Select the type which you want to clone.'),
+      );
+      $form['next'] = array(
+        '#type' => 'submit',
+        '#value' => t('Next'),
+      );
+      $form_state['storage']['entity_type'] =  $entity_type;
+      break;
+
+    // List the fields / field groups.
+    case 2:
+         
+      // Field group.
+      $all_groups = function_exists('field_group_info_groups') ? field_group_info_groups() : array();
+      
+      // Fields.
+      $field_options = $instances = array();
+      //Bundle 
+      $selected_bundle = $form_state['page_values'][1]['bundle'];
+      
+      $instances = field_info_instances($entity_type, $selected_bundle); 
+      ksort($instances);
+      foreach ($instances as $key => $info) {
+        $field_options[$key]['field'] = $info['field_name']; // Same as $key.
+        $field_options[$key]['label'] = $info['label'];
+      }
+      $form['form-info'] = array(
+        '#markup' => t('<h2>Clone %entity-type %bundle-name.</h2>', array('%entity-type' => ucfirst($entity_type), '%bundle-name' => ucfirst($selected_bundle))),
+      );
+      $form['bundle-new-name'] = array(
+        '#title' => t('Name'),
+        '#type' => 'machine_name',
+        '#maxlength' => 32,
+        '#disabled' => FALSE,
+        '#machine_name' => array(
+          'exists' => $bundle_name_validate,
+        ),
+        '#description' => t('A unique machine-readable name for this %entity-type. It must only contain lowercase letters, numbers, and underscores. This name will be used internally.', array('%entity-type' => t(ucfirst($entity_type)), )), 
+      );
+  $form['fields-info'] = array(
+        '#markup' => t('Select fields you want to Clone.'),
+      );
+      $form['fields'] = array(
+        '#type' => 'tableselect',
+        '#header' => array('field' => t('Field name'), 'label' => t('Label')),
+        '#options' => $field_options,
+        '#empty' => t('No fields found.'),
+      );
+
+      // Field group support.
+      if (!empty($all_groups)) {
+        $group_options = $fieldgroups = array();
+        if (isset($all_groups[$entity_type])) {
+          if (isset($all_groups[$entity_type][$selected_bundle])) {
+            foreach ($all_groups[$entity_type][$selected_bundle] as $view_mode => $groups) {
+              foreach ($groups as $field_group) {
+                $group_options[$field_group->id]['fieldgroup'] = $field_group->label . ' (' . $field_group->bundle . ' - ' . $field_group->mode . ')';
+                $fieldgroups[$field_group->id] = $field_group;
+              }
+            }
+          }
+        }
+        if (!empty($group_options)) {
+          $form['fieldgroups-info'] = array(
+            '#markup' => t('Select field groups you want to export.'),
+          );
+          $form['fieldgroups'] = array(
+            '#type' => 'tableselect',
+            '#header' => array('fieldgroup' => t('Field group name')),
+            '#options' => $group_options,
+          );
+          $form['fieldgroups-full'] = array(
+            '#type' => 'value',
+            '#value' => $fieldgroups,
+          );
+        }
+      }
+
+      $form['actions'] = array('#type' => 'actions');
+      $form['actions']['next'] = array(
+        '#type' => 'submit',
+        '#value' => t('Clone'),
+      );
+
+      $bc_info = bundle_copy_get_info();
+      $form['actions']['cancel'] = array(
+        '#markup' => l(t('Cancel'), $bc_info[$entity_type]['clone_menu']['path']),
+      );
+    break;
+
+    // Clone data.
+    case 3:
+
+      $selected_data = $form_state['page_values'];
+      
+      $bc_info = bundle_copy_get_info();
+      //Bundle which is cloned
+      $selected_bundle = $selected_data[1]['bundle'];
+      //New name of the bundle
+      $cloned_bundle_name = $selected_data[2]['bundle-new-name'];
+      
+      $selected_fields = $selected_data[2]['fields'];
+      
+      $selected_fieldgroups = isset($selected_data[2]['fieldgroups']) ? $selected_data[2]['fieldgroups'] : array();
+      $full_fieldgroups = isset($selected_data[2]['fieldgroups-full']) ? $selected_data[2]['fieldgroups-full'] : array();
+      $data = $instances = array();
+      $fields = field_info_fields();
+      $field_instances = field_info_instances($entity_type, $selected_bundle);
+      ksort($field_instances);
+      
+      // Bundle Clone load data.
+      $bundle_info_callback = $bc_info[$entity_type]['bundle_clone_load_callback'];
+      $bundle_info = $bundle_info_callback($selected_bundle, $entity_type); 
+      if (is_object($bundle_info)) {
+        $bundle_info->bc_entity_type = $entity_type;
+        $bundle_info = bundle_copy_clone_edit_object($bundle_info, $cloned_bundle_name);
+      }
+      elseif (is_array($bundle_info)) {
+        $bundle_info['bc_entity_type'] = $entity_type;
+        $bundle_info = bundle_copy_clone_edit_array($bundle_info, $cloned_bundle_name);
+      }
+      $data['bundle'] = $bundle_info;
+      
+      // Fields export data.
+      foreach ($selected_fields as $fkey => $finfo) {
+        if ($fkey === $finfo) {
+
+          if (!isset($data['fields'][$fkey])) {
+            unset($fields[$fkey]['id']);
+            //Insert the New Bundle in the bundles array
+            $fields[$fkey]['bundles'][$entity_type][] = $cloned_bundle_name;
+            
+            $data['fields'][$fkey] = $fields[$fkey];
+          }
+
+          if (isset($field_instances[$fkey])) {
+            unset($field_instances[$fkey]['id']);
+            unset($field_instances[$fkey]['field_id']);
+            //change the Bundle name
+            $field_instances[$fkey]['bundle'] = $cloned_bundle_name;
+          
+            $instances[$fkey][] = $field_instances[$fkey];
+          }
+        }
+      }  
+      ksort($instances);
+      $data['instances'] = $instances;
+
+      // Field group export data.
+      if (!empty($selected_fieldgroups)) {
+        foreach ($selected_fieldgroups as $key => $value) {
+          if ($value !== 0) {
+            //Replace the Bundlename in the identifier of the fieldgroup
+            $full_fieldgroups[$key]->identifier = str_replace($full_fieldgroups[$key]->bundle, $cloned_bundle_name, $full_fieldgroups[$key]->identifier);
+          
+            //Change the Bundle name
+            $full_fieldgroups[$key]->bundle = $cloned_bundle_name;
+          
+            $data['fieldgroups'][$full_fieldgroups[$key]->identifier] = $full_fieldgroups[$key];
+          }
+        }
+      }
+  
+      //call the save data function here to save the data 
+      bundle_copy_save_clone_data($data);
+  
+      break;
+   }
+   return $form;
+}
+/**
+ * Submit callback: Clone data.
+ */
+function bundle_copy_clone_submit($form, &$form_state) {
+
+  // Save the form state values.
+  $step = $form_state['step'];
+  $form_state['page_values'][$step] = $form_state['values'];
+
+  // Add step and rebuild.
+  $form_state['step'] = $form_state['step'] + 1;
+  $form_state['rebuild'] = TRUE;
+}
+
+
+//Helper function change the attributes of the Bundle Object
+
+function bundle_copy_clone_edit_object($bundle_info, $cloned_bundle_name) {
+    
+  if ($bundle_info->bc_entity_type == 'node') {
+    //change the name and type of content type
+    $bundle_info->type = $cloned_bundle_name;
+    $bundle_info-> name = $cloned_bundle_name;
+    $bundle_info-> orig_type = $cloned_bundle_name;
+  }
+  return $bundle_info;
+}
+
+//Helper function Change the attributes of the Bundle Array
+function bundle_copy_clone_edit_array($bundle_info, $cloned_bundle_name) {
+
+  if ($bundle_info->bc_entity_type == 'node') {
+    //change the name and type of content type
+    $bundle_info['type'] = $cloned_bundle_name;
+    $bundle_info['name'] = $cloned_bundle_name;
+    $bundle_info['orig_type'] = $cloned_bundle_name;
+  }
+  return $bundle_info;
+}
+
+
+/*
+ * Helper function to save the clone data
+ *
+*/
+function bundle_copy_save_clone_data($data) {
+
+  if (isset($data) && is_array($data)) {
+
+    $modules = module_list();
+    $bc_info = bundle_copy_get_info();
+
+    // Create bundle.
+    $bundle = $data['bundle'];
+    $entity_type = '';
+    if (is_object($bundle)) {
+      $entity_type = $bundle->bc_entity_type;
+    }
+    elseif (is_array($bundle)) {
+      $entity_type = $bundle['bc_entity_type'];
+    }
+    if (!empty($entity_type)) {
+      $bundle_clone_save_callback = $bc_info[$entity_type]['bundle_clone_save_callback'];
+      $bundle_info = $bundle_clone_save_callback($bundle);
+      drupal_set_message(t('%bundle bundle has been created.', array('%bundle' => $bundle->name)));
+    }
+
+    // Create or update fields and their instances
+    if (isset($data['fields'])) {
+      foreach ($data['fields'] as $key => $field) {
+
+        // Check if the field module exists.
+        $module = $field['module'];
+        if (!isset($modules[$module])) {
+          drupal_set_message(t('%field_name field could not be created because the module %module is disabled or missing.', array('%field_name' => $key, '%module' => $module)), 'error');
+          continue;
+        }
+
+        if (isset($data['instances'][$key])) {
+
+          // Create or update field.
+          $prior_field = field_read_field($field['field_name'], array('include_inactive' => TRUE));
+          if (!$prior_field) {
+            field_create_field($field);
+            drupal_set_message(t('%field_name field has been created.', array('%field_name' => $key)));
+          }
+          else {
+            $field['id'] = $prior_field['id'];
+            field_update_field($field);
+            drupal_set_message(t('%field_name field has been updated.', array('%field_name' => $key)));
+          }
+
+          // Create or update field instances.
+          foreach ($data['instances'][$key] as $ikey => $instance) {
+
+            // Make sure the needed key exists.
+            if (!isset($instance['field_name'])) {
+              continue;
+            }
+
+            $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
+            if (!$prior_instance) {
+              field_create_instance($instance);
+              drupal_set_message(t('%field_name instance has been created for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
+            }
+            else {
+              $instance['id'] = $prior_instance['id'];
+              $instance['field_id'] = $prior_instance['field_id'];
+              field_update_instance($instance);
+              drupal_set_message(t('%field_name instance has been updated for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
+            }
+          }
+        }
+      }
+    }
+
+    // Create / update fieldgroups.
+    if (isset($data['fieldgroups'])) {
+      if (module_exists('field_group')) {
+        ctools_include('export');
+        $existing_field_groups = field_group_info_groups();
+        foreach ($data['fieldgroups'] as $identifier => $fieldgroup) {
+          if (isset($existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name])) {
+            $existing = $existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name];
+            $fieldgroup->id = $existing->id;
+            if (!isset($fieldgroup->disabled)) {
+              $fieldgroup->disabled = FALSE;
+            }
+            ctools_export_crud_save('field_group', $fieldgroup);
+            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
+            drupal_set_message(t('%fieldgroup fieldgroup has been updated for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
+          }
+          else {
+            unset($fieldgroup->id);
+            unset($fieldgroup->export_type);
+            if (!isset($fieldgroup->disabled)) {
+              $fieldgroup->disabled = FALSE;
+            }
+            ctools_export_crud_save('field_group', $fieldgroup);
+            $fieldgroup->export_type = 1;
+            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
+            drupal_set_message(t('%fieldgroup fieldgroup has been saved for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
+          }
+        }
+      }
+      else {
+        drupal_set_message(t('The fieldgroups could not be saved because the <em>Field group</em> module is disabled or missing.'), 'error');
+      }
+    }
+
+    // Clear caches.
+    field_info_cache_clear();
+    if (module_exists('field_group')) {
+      cache_clear_all('field_groups', 'cache_field');
+    }
+  }
+  drupal_goto($bc_info[$entity_type]['clone_menu']['path']);
+}
